<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.association.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.example.association.pojo.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="gender" jdbcType="INTEGER" property="gender" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="image" jdbcType="VARCHAR" property="image" />
    <result column="introduction" jdbcType="VARCHAR" property="introduction" />
    <result column="role" jdbcType="INTEGER" property="role" />
    <result column="college" jdbcType="INTEGER" property="college" />
    <result column="major" jdbcType="INTEGER" property="major" />
    <result column="class_from" jdbcType="INTEGER" property="classFrom" />
  </resultMap>
  <sql id="Base_Column_List">
    id, username, password, gender, nickname, image, introduction, role, college, major, 
    class_from
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.association.pojo.User">
    insert into user (id, username, password, 
      gender, nickname, image, 
      introduction, role, college, 
      major, class_from)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{gender,jdbcType=INTEGER}, #{nickname,jdbcType=VARCHAR}, #{image,jdbcType=VARCHAR}, 
      #{introduction,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER}, #{college,jdbcType=INTEGER}, 
      #{major,jdbcType=INTEGER}, #{classFrom,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.example.association.pojo.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      <if test="image != null">
        image,
      </if>
      <if test="introduction != null">
        introduction,
      </if>
      <if test="role != null">
        role,
      </if>
      <if test="college != null">
        college,
      </if>
      <if test="major != null">
        major,
      </if>
      <if test="classFrom != null">
        class_from,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=INTEGER},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="image != null">
        #{image,jdbcType=VARCHAR},
      </if>
      <if test="introduction != null">
        #{introduction,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=INTEGER},
      </if>
      <if test="college != null">
        #{college,jdbcType=INTEGER},
      </if>
      <if test="major != null">
        #{major,jdbcType=INTEGER},
      </if>
      <if test="classFrom != null">
        #{classFrom,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.association.pojo.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=INTEGER},
      </if>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="image != null">
        image = #{image,jdbcType=VARCHAR},
      </if>
      <if test="introduction != null">
        introduction = #{introduction,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        role = #{role,jdbcType=INTEGER},
      </if>
      <if test="college != null">
        college = #{college,jdbcType=INTEGER},
      </if>
      <if test="major != null">
        major = #{major,jdbcType=INTEGER},
      </if>
      <if test="classFrom != null">
        class_from = #{classFrom,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.association.pojo.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=INTEGER},
      nickname = #{nickname,jdbcType=VARCHAR},
      image = #{image,jdbcType=VARCHAR},
      introduction = #{introduction,jdbcType=VARCHAR},
      role = #{role,jdbcType=INTEGER},
      college = #{college,jdbcType=INTEGER},
      major = #{major,jdbcType=INTEGER},
      class_from = #{classFrom,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

<!--  自定义mapper-->
  <update id="updateRoleById" parameterType="java.lang.Integer">
    update user
    set role = 2
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectUserByName" parameterType="java.lang.String" resultType="com.example.association.pojo.User">
    select *
    from user
    where username = #{username,jdbcType=VARCHAR}
  </select>

  <select id="getIdByUser" parameterType="java.lang.String" resultType="java.lang.Integer">
    select id
    from user
    where nickname like concat('%',#{nickname},'%')
  </select>

  <select id="getNameById" parameterType="java.lang.Integer" resultType="java.lang.String">
    select username
    from user
    where id=#{userId}
  </select>

  <update id="updatePassword">
    update user
    set password = #{newPassword,jdbcType=VARCHAR}
    where id = #{userId,jdbcType=INTEGER}
  </update>

  <update id="updateRoleTo1ById">
    update user
    set role = 1
    where id = #{adminId,jdbcType=INTEGER}
  </update>
</mapper>